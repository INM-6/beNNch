<?xml version="1.0" encoding="UTF-8"?>
<jube>

  <!-- configurations based on include-paths handed in from Snakemake level -->
  <include from="machine_params.xml" path="./" /> <!-- machine configuration -->

  <!-- BEGIN ALL AVAILABLE DEPENDANT CONFIGURATIONS -->

  <!-- include available batch system definitions -->
  <include from="batchsystem/bash/batch_params.xml" path="./" />
  <include from="batchsystem/slurm/batch_params.xml" path="./" />

  <!-- END ALL AVAILABLE DEPENDANT CONFIGURATIONS -->

  <benchmark name="thread_scaling" outpath="thread_scaleing_bench"><!-- is usually overwritten by Snakefile -->
    <comment>no comment</comment>

    <!-- configurations based on include-paths handed in from Snakemake level -->

    <parameterset name="simulator_params" init_with="simulator_params.xml" path="./" />
    <parameterset name="model_params" init_with="model_params.xml" path="./" />

    <!-- get simulator and model
         files may contain any number of steps enclosed in a <steps> tag
         final step must be a {simulator,model}_compile, which the benchmark depends on -->
    <include from="simulator_params.xml" path="./steps/" />
    <include from="model_params.xml" path="./steps/" />

    <!-- Load jobfile -->
    <fileset name="files">
      <copy>batchsystem/${batchsystem}/${jobfile}.template</copy>
      <copy>common/time</copy>
      <copy>common/about.py</copy>
    </fileset>
    <substituteset name="jobfile_substitutions">
      <iofile in="${jobfile}.template" out="$jobfile" />
      <sub source="#JOBNAME#" dest="$jobname" />
      <sub source="#WORKDIR#" dest="$workdir" />
      <sub source="#STDOUT#" dest="$stdout" />
      <sub source="#STDERR#" dest="$stderr" />
      <sub source="#WALLTIME#" dest="$walltime" />
      <sub source="#TASKS#" dest="$tasks" />
      <sub source="#CPUSPERTASK#" dest="$cpuspertask" />
      <sub source="#TASKSPERCORE#" dest="$taskspercore" />
      <sub source="#NODES#" dest="$nodes" />
      <sub source="#MAILTYPE#" dest="$mailtype" />
      <sub source="#MAILUSER#" dest="$mailuser" />
      <sub source="#ACCOUNT#" dest="$account" />
      <sub source="#RESERVATION#" dest="$reservation" />
      <sub source="#READYFILE#" dest="$readyfile" />
      <sub source="#AFFINITY#" dest="$affinity" />
      <sub source="#MODULES#" dest="$modules" />
      <sub source="#EXEC#" dest="$exec" />
    </substituteset>

    <step name="run" depend="simulator_compile,model_compile" iterations="1"><!-- STEPrun -->
      <use>userdata_${USER}</use>
      <use>machine_params</use>
      <use>batch_params_${batchsystem}</use>
      <use>files,jobfile_substitutions</use>
      <do> <!-- done_file="$readyfile"-->
        false;
        #echo "submitting jobfile:"
        #cat $jobfile
        #./about.py
        #$submit_cmd $jobfile
      </do>
    </step>

    <patternset name="pattern_stdio" init_with="model_params.xml" path="./" />

    <!-- Analyse -->
    <analyser name="analyse">
      <use>pattern_stdio</use> <!-- use existing patternset -->
      <analyse step="run">
        <file>stdout.app</file> <!-- file which should be scanned -->
        <file>stderr.app</file> <!-- file which should be scanned -->
      </analyse>
    </analyser>

    <!-- Create result table -->
    <result name="external instumentation">
      <use>analyse</use> <!-- use existing analyser -->
      <table name="external_results" style="pretty" sort="cpureal">
        <column>commit</column>
        <column>PREFETCHING</column>
        <column>LOCALITY</column>
        <column>PREFETCH_DISTANCE</column>
        <column>TARGET_IDX</column>
        <column>N_TARGETS_PER_NEURON</column>
        <column>affinity</column>
        <column>seed</column>
        <column>n_neurons_per_node</column>
        <column>n_connections_per_neuron</column>
        <column>simtime_in_steps</column>
        <column>mindelay_in_steps</column>
        <column>maxdelay_in_steps</column>
        <column>mpi_recv_buffer_size</column>
        <!-- measurements -->
        <column>cpureal_min</column>
        <column>cpureal_avg</column>
        <column>cpureal_std</column>
        <column>cpupct_min</column>
        <column>cpupct_max</column>
        <!--column>cpuuser</column-->
        <!--column>cpusys</column-->
        <column>memres_max</column>
        <column>memres_avg</column>
        <column>memres_std</column>
        <column>mempfaults</column>
        <column>memprecovers</column>
        <column>switches</column>
        <column>signals</column>
        <column>sock_send</column>
        <column>sock_recv</column>
      </table>
    </result>

    <result name="internal instumentation">
      <use>analyse</use> <!-- use existing analyser -->
      <table name="internal_results" style="pretty" sort="deliver_time">
        <column>commit</column>
        <column>PREFETCHING</column>
        <column>LOCALITY</column>
        <column>PREFETCH_DISTANCE</column>
        <column>TARGET_IDX</column>
        <column>N_TARGETS_PER_NEURON</column>
        <column>affinity</column>
        <column>seed</column>
        <column>n_neurons_per_node</column>
        <column>n_connections_per_neuron</column>
        <column>simtime_in_steps</column>
        <column>mindelay_in_steps</column>
        <column>maxdelay_in_steps</column>
        <column>mpi_recv_buffer_size</column>
        <!-- measurements -->
        <column>deliver_time_min</column>
        <column>deliver_time_avg</column>
        <column>deliver_time_std</column>
      </table>
    </result>

  </benchmark>
</jube>
